{
    "Sim.AiSkirmishBase": {
        "print": "INFO: Print a log message",
        "AddResourceManagerType": "INFO: base:AddResourceManagerType(storageType, resourceType, percent, cap) - Adds a resource type to be monitored by base",
        "AddSkirmishItem": "INFO: base:AddSkirmishItem(itemName) - Adds an item from a blueprint",
        "AddUnit": "INFO: base:AddUnit(engineer) - Adds engineer to the base",
        "GetPosition": "INFO: base:GetPosition() - get the position",
        "RequestExcessEconomy": "INFO: base:RequestExcessEconomy() - Requests any left over econ from strat manager",
        "SetResourceCap": "INFO: base:SetResourceCap(storageType, resourceType, cap) - Adds a resource cap for base",
        "UseSkirmishBaseBlueprint": "INFO: base:UseSkirmishBaseBlueprint(blueprintName, useStartupItem)",
        "moho.skirmish_base_manager_methods": "INFO:"
    },
    "Sim.CAiAttackerImpl": {
        "moho.skirmish_base_manager_methods": "INFO:",
        "CanAttackTarget": "INFO: Loop through the weapons to see if the target can be attacked",
        "FindBestEnemy": "INFO: Find the best enemy target for a weapon",
        "ForceEngage": "INFO: Force to engage enemy target",
        "GetDesiredTarget": "INFO: Get the desired target",
        "GetMaxWeaponRange": "INFO: Loop through the weapons to find the weapon with the longest range that is not manual fire",
        "GetPrimaryWeapon": "INFO: Loop through the weapons to find our primary weapon",
        "GetTargetWeapon": "INFO: Loop through the weapons to find one that we can use to attack target",
        "GetUnit": "INFO: Returns the unit this attacker is bound to.",
        "GetWeaponCount": "INFO: Return the count of weapons",
        "HasSlavedTarget": "INFO: Check if the attack has a slaved weapon that currently has a target",
        "IsTargetExempt": "INFO: Check if the target is exempt from being attacked",
        "IsTooClose": "INFO: Check if the target is too close to our weapons",
        "IsWithinAttackRange": "INFO: Check if the target is within any weapon range",
        "ResetReportingState": "INFO: Reset reporting state",
        "SetDesiredTarget": "INFO: Set the desired target",
        "Stop": "INFO: Stop the attacker",
        "moho.CAiAttackerImpl_methods": "INFO:"
    },
    "Sim.CAiBrain": {
        "moho.CAiAttackerImpl_methods": "INFO:",
        "AddArmyStat": "INFO: AddArmyStat(statname,val)",
        "AddResourceManagerType": "INFO: CAiBrain:AddResourceManagerType(storageType, resourceType, percent, cap) - Adds a resource type to be monitored by base",
        "AddSkirmishBase": "INFO: CAiBrain:AddSkirmishBase(baseName)",
        "ApplyAllResearchToUnit": "INFO: CAiBrain:ApplyResearchToUnit(unit)",
        "AssignThreatAtPosition": "INFO: CAiBrain:AssignThreatAtPosition(position, threat, [decay], [threattype])",
        "AssignUnitsToPlatoon": "INFO: CAiBrain:AssignUnitsToPlatoon()",
        "BuildPlatoon": "INFO: brain:BuildPlatoon()",
        "BuildStructure": "INFO: brain:BuildStructure(builder, structureName, locationInfo)",
        "BuildUnit": "INFO: brain:BuildUnit()",
        "CanBuildPlatoon": "INFO: brain:CanBuildPlatoon()",
        "CanBuildStructureAt": "INFO: brain:CanBuildStructureAt(blueprint, location)",
        "CheckBlockingTerrain": "INFO: CAiBrain:CheckBlockingTerrain( startPos, endPos, arcType )",
        "CompleteResearch": "INFO: CAiBrain:CompleteResearch(researchTech)",
        "CreateResourceBuildingNearest": "INFO: brain:CreateResourceBuildingNearest(structureName, posX, posY)",
        "CreateStrategicManager": "INFO: CAiBrain:CreateStrategicManager(archetype)",
        "CreateUnitNearSpot": "INFO: brain:CreateUnitNearSpot(unitName, posX, posY)",
        "DecideWhatToBuild": "INFO: brain:DecideWhatToBuild(builder, type, buildingTypes)",
        "DisbandPlatoon": "INFO: CAiBrain:DisbandPlatoon()",
        "DisbandPlatoonUniquelyNamed": "INFO: CAiBrain:DisbandPlatoonUniquelyNamed()",
        "DumpNetData": "INFO: Dumps neural net data",
        "FindClosestArmyWithBase": "INFO: CAiBrain:FindClosestArmyWithBase()",
        "FindUnit": "INFO: brain:FindUnit(unitCategory, needToBeIdle) -- Return an unit that matches the unit name (can specify idle or not)",
        "FindUnitToUpgrade": "INFO: brain:FindUnitToUpgrade(upgradeList) -- Return a unit and it's upgrade blueprint",
        "FindUpgradeBP": "INFO: brain:FindUpgradeBP(unitName, upgradeList) -- Return an upgrade blueprint for the unit passed in",
        "GetArmyIndex": "INFO: Returns the ArmyIndex of the army represented by this brain",
        "GetArmyStartPos": "INFO: brain:GetArmyStartPos()",
        "GetArmyStat": "INFO: brain:GetArmyStat(StatName,defaultValue)",
        "GetAttackVectors": "INFO: CAiBrain:GetAttackVectors()",
        "GetAvailableFactories": "INFO: brain:GetAvailableFactories()",
        "GetBlueprintStat": "INFO: Return a blueprint stat filtered by category",
        "GetCurrentEnemy": "INFO: Return this brain's current enemy",
        "GetCurrentUnits": "INFO: Return how many units of the given categories exist",
        "GetEconomyIncome": "INFO: CAiBrain:GetEconomyIncome()",
        "GetEconomyRequested": "INFO: CAiBrain:GetEconomyRequested()",
        "GetEconomyStored": "INFO: CAiBrain:GetEconomyStored()",
        "GetEconomyStoredRatio": "INFO: CAiBrain:GetEconomyStoredRatio()",
        "GetEconomyTrend": "INFO: CAiBrain:GetEconomyTrend()",
        "GetEconomyUsage": "INFO: CAiBrain:GetEconomyUsage()",
        "GetFactionIndex": "INFO: Returns the faction of the army represented by this brain",
        "GetHighestThreatPosition": "INFO: CAiBrain:GetHighestThreatPosition( ring, restriction, [threatType], [armyIndex] )",
        "GetListOfUnits": "INFO: brain:GetListOfUnits(entityCategory, needToBeIdle, requireBuilt)",
        "GetMapWaterRatio": "INFO: CAiBrain:GetMapWaterRatio()",
        "GetNoRushTicks": "INFO: CAiBrain:GetNoRushTicks()",
        "GetNumPlatoonsTemplateNamed": "INFO: GetNumPlatoonsTemplateNamed",
        "GetNumPlatoonsWithAI": "INFO: GetNumPlatoonsWithAI",
        "GetNumUnitsAroundPoint": "INFO: CAiBrain:GetNumUnitsAroundPoint()",
        "GetPersonality": "INFO: Return the personality for this brain to use",
        "GetPlatoonUniquelyNamed": "INFO: CAiBrain:GetPlatoonUniquelyNamed()",
        "GetPlatoonsList": "INFO: CAiBrain:GetPlatoonsList()",
        "GetSkirmishBase": "INFO: CAiBrain:GetSkirmishBase(baseName)",
        "GetStrategicArchetypeBlueprint": "INFO: blueprint = brain:GetStrategicArchetypeBlueprint()",
        "GetThreatAtPosition": "INFO: CAiBrain:GetThreatAtPosition(position, ring, restriction, [threatType], [armyIndex] )",
        "GetThreatBetweenPositions": "INFO: CAiBrain:GetThreatBetweenPositions( position, position, restriction, [threatType], [armyIndex] )",
        "GetThreatsAroundPosition": "INFO: CAiBrain:GetThreatsAroundPosition( position, ring, restriction, [threatType], [armyIndex] )",
        "GetUnitBlueprint": "INFO: blueprint = brain:GetUnitBlueprint(bpName)",
        "GetUnitsAroundPoint": "INFO: CAiBrain:GetUnitsAroundPoint()",
        "GiveResource": "INFO: GiveResource(type,amount)",
        "GiveStorage": "INFO: GiveStorage(type,amount)",
        "HasResearched": "INFO: CAiBrain:HasResearched(researchTech)",
        "IsAnyEngineerBuilding": "INFO: brain:IsAnyEngineerBuilding(category)",
        "IsOpponentAIRunning": "INFO: Returns true if opponent AI should be running",
        "LoadNetData": "INFO: Loads default neural network data",
        "MakePlatoon": "INFO: CAiBrain:MakePlatoon()",
        "NumCurrentlyBuilding": "INFO: brain:NumCurrentlyBuilding( entityCategoryOfBuildee, entityCategoryOfBuilder )",
        "PickBestAttackVector": "INFO: CAiBrain:PickBestAttackVector()",
        "PlatoonExists": "INFO: CAiBrain:PlatoonExists()",
        "PrintResourceData": "INFO: CAiBrain:PrintResourceData()",
        "RemoveArmyStatsTrigger": "INFO: Remove an army stats trigger",
        "ResearchRestrict": "INFO: CAiBrain:ResearchRestrict( researchTech, enable )",
        "SetArmyStat": "INFO: SetArmyStat(statname,val)",
        "SetArmyStatsTrigger": "INFO: Sets an army stat trigger",
        "SetCurrentEnemy": "INFO: Set the current enemy for this brain to attack",
        "SetCurrentPlan": "INFO: Set the current plan for this brain to run",
        "SetGreaterOf": "INFO: SetGreaterOf(statname,val)",
        "SetMaxStorage": "INFO: SetMaxStorage(type,amount)",
        "SetResourceCap": "INFO: CAiBrain:SetResourceCap(storageType, resourceType, cap) - Adds a resource cap for base",
        "SetResourceSharing": "INFO: SetResourceSharing(bool)",
        "SetUpAttackVectorsToArmy": "INFO: CAiBrain:SetUpAttackVectorsToArmy()",
        "SetUseAlternateBehaviors": "INFO: CAiBrain:SetUseAlternateBehaviors(bool)",
        "SkirmishUnitVeterancyIncrease": "INFO: CAiBrain:SkirmishUnitVeterancyIncrease(Unit)",
        "StartResearch": "INFO: StartResearch(army, researchName, [boostLevel], [clear])",
        "StartSkirmishConditions": "INFO: CAiBrain:StartSkirmishConditions()",
        "StrategicManagerPickStartingBase": "INFO: CAiBrain:StrategicManagerPickStartingBase(baseName)",
        "StrategicManagerSetDifficultyLevel": "INFO: CAiBrain:StrategicManagerSetDifficultyLevel(level)",
        "StrategicManagerUnitComplete": "INFO: CAiBrain:StrategicManagerUnitComplete(Unit)",
        "TakeResource": "INFO: taken = TakeResource(type,amount)",
        "moho.aibrain_methods": "INFO:"
    },
    "Sim.CAiNavigatorImpl": {
        "moho.aibrain_methods": "INFO:",
        "AtGoal": "INFO:",
        "BroadcastResumeTaskEvent": "INFO: Broadcast event to resume any listening task that is currently suspended",
        "GetCurrentTargetPos": "INFO: This returns the current navigator target position for the unit",
        "GetGoalPos": "INFO: This returns the current goal position of our navigator",
        "GetStatus": "INFO:",
        "HasGoodPath": "INFO:",
        "IgnoreFormation": "INFO:",
        "IsIgnorningFormation": "INFO:",
        "SetDestUnit": "INFO: Set the navigator's destination as another unit (chase/follow)",
        "SetGoal": "INFO: Set the navigator's destination as a particular position",
        "SetSpeedThroughGoal": "INFO:  Set flag in navigator so the unit will know whether to stop at final goal  or speed through it. This would be set to True during a patrol or a series  of waypoints in a complex path.",
        "moho.navigator_methods": "INFO:"
    },
    "Sim.CAiPersonality": {
        "moho.navigator_methods": "INFO:",
        "GetAirUnitsEmphasis": "INFO: CAiPersonality:GetAirUnitsEmphasis()",
        "GetArmySize": "INFO: CAiPersonality:GetArmySize()",
        "GetAttackFrequency": "INFO: CAiPersonality:GetAttackFrequency()",
        "GetBotUnitsEmphasis": "INFO: CAiPersonality:GetBotUnitsEmphasis()",
        "GetChatFrequency": "INFO: CAiPersonality:GetChatFrequency()",
        "GetChatPersonality": "INFO: CAiPersonality:GetChatPersonality()",
        "GetCoordinatedAttacks": "INFO: CAiPersonality:GetCoordinatedAttacks()",
        "GetCounterForces": "INFO: CAiPersonality:GetCounterForces()",
        "GetDefenseDriven": "INFO: CAiPersonality:GetDefenseDriven()",
        "GetDifficulty": "INFO: CAiPersonality:GetDifficulty()",
        "GetDirectDamageEmphasis": "INFO: CAiPersonality:GetDirectDamageEmphasis()",
        "GetEconomyDriven": "INFO: CAiPersonality:GetEconomyDriven()",
        "GetExpansionDriven": "INFO: CAiPersonality:GetExpansionDriven()",
        "GetFactoryTycoon": "INFO: CAiPersonality:GetFactoryTycoon()",
        "GetFavouriteStructures": "INFO: CAiPersonality:GetFavouriteStructures()",
        "GetFavouriteUnits": "INFO: CAiPersonality:GetFavouriteUnits()",
        "GetFormationUse": "INFO: CAiPersonality:GetFormationUse()",
        "GetInDirectDamageEmphasis": "INFO: CAiPersonality:GetInDirectDamageEmphasis()",
        "GetIntelBuildingTycoon": "INFO: CAiPersonality:GetIntelBuildingTycoon()",
        "GetIntelGathering": "INFO: CAiPersonality:GetIntelGathering()",
        "GetPersonalityName": "INFO: CAiPersonality:GetPersonalityName()",
        "GetPlatoonSize": "INFO: CAiPersonality:GetPlatoonSize()",
        "GetQuittingTendency": "INFO: CAiPersonality:GetQuittingTendency()",
        "GetRepeatAttackFrequency": "INFO: CAiPersonality:GetRepeatAttackFrequency()",
        "GetSeaUnitsEmphasis": "INFO: CAiPersonality:GetSeaUnitsEmphasis()",
        "GetSpecialtyForcesEmphasis": "INFO: CAiPersonality:GetSpecialtyForcesEmphasis()",
        "GetSuperWeaponTendency": "INFO: CAiPersonality:GetSuperWeaponTendency()",
        "GetSupportUnitsEmphasis": "INFO: CAiPersonality:GetSupportUnitsEmphasis()",
        "GetSurvivalEmphasis": "INFO: CAiPersonality:GetSurvivalEmphasis()",
        "GetTankUnitsEmphasis": "INFO: CAiPersonality:GetTankUnitsEmphasis()",
        "GetTargetSpread": "INFO: CAiPersonality:GetTargetSpread()",
        "GetTeamSupport": "INFO: CAiPersonality:GetTeamSupport()",
        "GetTechAdvancement": "INFO: CAiPersonality:GetTechAdvancement()",
        "GetUpgradesDriven": "INFO: CAiPersonality:GetUpgradesDriven()",
        "moho.aipersonality_methods": "INFO:"
    },
    "Sim.CAimManipulator": {
        "moho.aipersonality_methods": "INFO:",
        "OnTarget": "INFO: AimManipulator:OnTarget()",
        "SetAimHeadingOffset": "INFO: AimManipulator:SetAimHeadingOffset( offset )",
        "SetEnabled": "INFO: AimManipulator:SetEnabled(flag)",
        "SetFiringArc": "INFO: AimManipulator:SetFiringArc(minHeading, maxHeading, headingMaxSlew, minPitch, maxPitch, pitchMaxSlew)",
        "SetFrozen": "INFO: AimManipulator:SetFrozen(flag)",
        "SetHeadingPitch": "INFO: AimManipulator:SetHeadingPitch( heading, pitch )",
        "SetResetPoseTime": "INFO: AimManipulator:SetResetPoseTime(resetTime)",
        "SetResetPoseTimer": "INFO: AimManipulator:SetResetPoseTimer(resetTime)",
        "moho.AimManipulator": "INFO:"
    },
    "Sim.CAnimationManipulator": {
        "moho.AimManipulator": "INFO:",
        "GetAnimationFraction": "INFO: fraction = AnimationManipulator:GetAnimationFraction()",
        "GetAnimationTime": "INFO: time = AnimationManipulator:GetAnimationTime()",
        "GetRate": "INFO: rate = AnimationManipulator:GetRate()",
        "PlayAnim": "INFO: AnimManipulator:PlayAnim(entity, animName, looping=false, scaleAnimBySpeed=false)",
        "PlayAnimRaw": "INFO: AnimManipulator:PlayAnimRaw(entity, animRaw, looping=false, scaleAnimBySpeed=false)",
        "SetAnimationFraction": "INFO: AnimationManipulator:SetAnimationFraction(fraction)",
        "SetAnimationTime": "INFO: AnimationManipulator:SetAnimationTime(fraction)",
        "SetBoneEnabled": "INFO: AnimationManipulator:SetBoneEnabled(bone, value, include_decscendants=true)",
        "SetDirectionalAnim": "INFO: AnimationManipulator:SetDirectionalAnim(bool)",
        "SetDisableOnSignal": "INFO: AnimationManipulator:SetDisableOnSignal(bool)",
        "SetNormalizedAnimationTime": "INFO: AnimationManipulator:SetNormalizedAnimationTime(fraction)",
        "SetOverwriteMode": "INFO: AnimationManipulator:SetOverwriteMode(bool)",
        "SetRate": "INFO: AnimationManipulator:SetRate(rate)Set the relative rate at which this anim plays; 1.0 is normal speed.Rate can be negative to play backwards or 0 to pause.",
        "moho.AnimationManipulator": "INFO:"
    },
    "Sim.CBoneEntityManipulator": {
        "moho.AnimationManipulator": "INFO:",
        "moho.BoneEntityManipulator": "INFO:"
    },
    "Sim.CBuilderArmManipulator": {
        "moho.BoneEntityManipulator": "INFO:",
        "SetAimingArc": "INFO: BuilderArmManipulator:SetAimingArc(minHeading, maxHeading, headingMaxSlew, minPitch, maxPitch, pitchMaxSlew)",
        "SetHeadingPitch": "INFO: CBuilderArmManipulator:SetHeadingPitch( heading, pitch )",
        "moho.BuilderArmManipulator": "INFO:"
    },
    "Sim.CCollisionManipulator": {
        "moho.BuilderArmManipulator": "INFO:",
        "Enable": "INFO: Fixme: this should just use base manipulator enable/disable",
        "EnableTerrainCheck": "INFO: Make manipulator check for terrain height intersection",
        "WatchBone": "INFO: CollisionDetector:WatchBone(bone) -- add the given bone to those watched by this manipulator",
        "moho.CollisionManipulator": "INFO:"
    },
    "Sim.CDamage": {
        "moho.CollisionManipulator": "INFO:",
        "GetTarget": "INFO: CDamage:GetTarget()",
        "SetInstigator": "INFO: CDamage:SetInstigator()",
        "SetTarget": "INFO: CDamage:SetTarget()",
        "moho.CDamage": "INFO:"
    },
    "Sim.CDecalHandle": {
        "moho.CDamage": "INFO:",
        "moho.CDecalHandle": "INFO:"
    },
    "Sim.CEconomyEvent": {
        "moho.CDecalHandle": "INFO:",
        "moho.EconomyEvent": "INFO:"
    },
    "Sim.CFootPlantManipulator": {
        "moho.EconomyEvent": "INFO:",
        "moho.FootPlantManipulator": "INFO:"
    },
    "Sim.CPlatoon": {
        "moho.FootPlantManipulator": "INFO:",
        "AttackTarget": "INFO: CPlatoon:AttackTarget()",
        "CalculatePlatoonThreat": "INFO: CPlatoon:CalculatePlatoonThreat()",
        "CalculatePlatoonThreatAroundPosition": "INFO: CPlatoon:CalculatePlatoonThreatAroundPosition()",
        "CanAttackTarget": "INFO: CPlatoon:CanAttackTarget()",
        "CanConsiderFormingPlatoon": "INFO: CPlatoon:CanConsiderFormingPlatoon()",
        "CanFormPlatoon": "INFO: CPlatoon:CanFormPlatoon()",
        "Destroy": "INFO: CPlatoon:Destroy()",
        "DisbandOnIdle": "INFO: CPlatoon:DisbandOnIdle()",
        "FerryToLocation": "INFO: CPlatoon:FerryToLocation()",
        "FindClosestUnit": "INFO: CPlatoon:FindClosestUnit()",
        "FindClosestUnitToBase": "INFO: CPlatoon:FindClosestUnitToBase()",
        "FindFurthestUnit": "INFO: CPlatoon:FindFurthestUnit()",
        "FindHighestValueUnit": "INFO: CPlatoon:FindHighestValueUnit()",
        "FindPrioritizedUnit": "INFO: CPlatoon:FindPrioritizedUnit()",
        "FormPlatoon": "INFO: CPlatoon:FormPlatoon()",
        "GetAIPlan": "INFO: CPlatoon:GetAIPlan()",
        "GetBrain": "INFO: CPlatoon:GetBrain()",
        "GetFactionIndex": "INFO: CPlatoon:GetFactionIndex()",
        "GetFerryBeacons": "INFO: CPlatoon:GetFerryBeacons()",
        "GetPersonality": "INFO: CPlatoon:GetPersonality()",
        "GetPlatoonLifetimeStats": "INFO: CPlatoon:GetPlatoonLifetimeStats()",
        "GetPlatoonPosition": "INFO: CPlatoon:GetPlatoonPosition()",
        "GetPlatoonUniqueName": "INFO: CPlatoon:GetPlatoonUniqueName()",
        "GetPlatoonUnits": "INFO: platoon:GetPlatoonUnits()",
        "GetSkirmishBase": "INFO: CPlatoon:GetSkirmishBase()",
        "GetSkirmishBaseName": "INFO: CPlatoon:GetSkirmishBaseName()",
        "GetSkirmishItemName": "INFO: CPlatoon:GetSkirmishItemName()",
        "GetSquadPosition": "INFO: CPlatoon:GetSquadPosition()",
        "GetSquadUnits": "INFO: CPlatoon:GetSquadUnits()",
        "GuardTarget": "INFO: CPlatoon:GuardTarget()",
        "IsAttacking": "INFO: CPlatoon:IsAttacking()",
        "IsCommandsActive": "INFO: CPlatoon:IsCommandsActive()",
        "IsFerrying": "INFO: CPlatoon:IsFerrying()",
        "IsMoving": "INFO: CPlatoon:IsMoving()",
        "IsOpponentAIRunning": "INFO: CPlatoon:IsOpponentAIRunning()",
        "IsPatrolling": "INFO: CPlatoon:IsPatrolling()",
        "LoadUnits": "INFO: CPlatoon:LoadUnits()",
        "MoveToLocation": "INFO: CPlatoon:MoveToLocation()",
        "MoveToTarget": "INFO: CPlatoon:MoveToTarget()",
        "Patrol": "INFO: CPlatoon:Patrol()",
        "PlatoonCategoryCount": "INFO: Count how many units fit the specified category",
        "PlatoonCategoryCountAroundPosition": "INFO: Count how many units fit the specified category around a position",
        "ResetPlatoonStats": "INFO: CPlatoon:ResetPlatoonStats()",
        "SetPlatoonFormationOverride": "INFO: CPlatoon:SetPlatoonFormationOverride()",
        "SetPlatoonTask": "INFO: CPlatoon:SetPlatoonTask( <taskName> )",
        "SetPrioritizedTargetList": "INFO: CPlatoon:SetPrioritizedTargetList()",
        "Stop": "INFO: CPlatoon:Stop()",
        "SwitchAIPlan": "INFO: CPlatoon:SwitchAIPlan()",
        "Teleport": "INFO: CPlatoon:Teleport()",
        "ToggleAbility": "INFO: CPlatoon:ToggleAbility(abilityName, boolean(true = on, false = off)))",
        "UniquelyNamePlatoon": "INFO: CPlatoon:UniquelyNamePlatoon()",
        "UnloadAllAtLocation": "INFO: CPlatoon:UnloadAllAtLocation()",
        "UnloadUnitsAtLocation": "INFO: CPlatoon:UnloadUnitsAtLocation()",
        "UseAbility": "INFO: CPlatoon:UseAbility(abilityName, target(optional))",
        "UseAbilityAtLocation": "INFO: CPlatoon:UseAbilityAtLocation(abilityName, targetLocation)",
        "UseFerryBeacon": "INFO: CPlatoon:UseFerryBeacon()",
        "UseTeleporter": "INFO: CPlatoon:UseTeleporter()",
        "moho.platoon_methods": "INFO:"
    },
    "Sim.CRotateManipulator": {
        "moho.platoon_methods": "INFO:",
        "ClearFollowBone": "INFO: RotateManipulator:ClearFollowBone()",
        "ClearGoal": "INFO: RotateManipulator:ClearGoal()",
        "GetCurrentAngle": "INFO: RotateManipulator:GetCurrentAngle()",
        "SetAccel": "INFO: RotateManipulator:SetAccel(degrees_per_second_squared)",
        "SetCurrentAngle": "INFO: RotateManipulator:SetCurrentAngle(angle)",
        "SetFollowBone": "INFO: RotateManipulator:SetFollowBone(bone)",
        "SetGoal": "INFO: RotateManipulator:SetGoal(self, degrees)",
        "SetSpeed": "INFO: RotateManipulator:SetSpeed(self, degrees_per_second)",
        "SetSpinDown": "INFO: RotateManipulator:SetSpinDown(self, flag)",
        "SetTargetSpeed": "INFO: RotateManipulator:SetTargetSpeed(degrees_per_second)",
        "moho.RotateManipulator": "INFO:"
    },
    "Sim.CSlaveManipulator": {
        "moho.RotateManipulator": "INFO:",
        "moho.SlaveManipulator": "INFO:"
    },
    "Sim.CSlideManipulator": {
        "moho.SlaveManipulator": "INFO:",
        "SetAcceleration": "INFO: CSlideManipulator:SetAcceleration(acc)",
        "SetDeceleration": "INFO: CSlideManipulator:SetDeceleration(dec)",
        "SetGoal": "INFO: CSlideManipulator:SetGoal(goal_x, goal_y, goal_z)",
        "SetSpeed": "INFO: CSlideManipulator:SetSpeed(speed)",
        "SetWorldUnits": "INFO: CSlideManipulator:SetWorldUnits(bool)",
        "moho.SlideManipulator": "INFO:"
    },
    "Sim.CStorageManipulator": {
        "moho.SlideManipulator": "INFO:",
        "moho.StorageManipulator": "INFO:"
    },
    "Sim.CThrustManipulator": {
        "moho.StorageManipulator": "INFO:",
        "moho.ThrustManipulator": "INFO:"
    },
    "Sim.CTurnManipulator": {
        "moho.ThrustManipulator": "INFO:",
        "SetTurningSpeed": "INFO: TurnManipulator:SetTurningSpeed(turnSpeed)",
        "moho.TurnManipulator": "INFO:"
    },
    "Sim.CUnitScriptTask": {
        "moho.TurnManipulator": "INFO:",
        "SetAIResult": "INFO: Set the AI result, success or fail",
        "moho.ScriptTask_Methods": "INFO:"
    },
    "Sim.CollisionBeamEntity": {
        "moho.ScriptTask_Methods": "INFO:",
        "Enable": "INFO: CollisionBeamEntity:Enable()",
        "GetLauncher": "INFO: CollisionBeamEntity:GetLauncher()",
        "IsEnabled": "INFO: bool = CollisionBeamEntity:IsEnabled()",
        "SetBeamFx": "INFO: CollisionBeamEntity:SetBeamFx(beamEmitter, checkCollision) -- set an emitter to be controlled by this beam. Its length parameter will be set from the beam entity's collision distance.",
        "moho.CollisionBeamEntity": "INFO:"
    },
    "Sim.Entity": {
        "moho.CollisionBeamEntity": "INFO:",
        "AddAgentFalloffForce": "INFO: AddAgentFalloffForce( radius, force, [alliance] )",
        "AddLocalImpulse": "INFO: AddLocalImpulse(self, Ix, Iy, Iz, Px, Py, Pz)",
        "AddManualScroller": "INFO: Entity:AddManualScroller(scrollSpeed1, scrollSpeed2)",
        "AddManualScrollerU": "INFO: Entity:AddManualScrollerU(int MaterialIndex, int speed)",
        "AddManualScrollerV": "INFO: Entity:AddManualScrollerV(int MaterialIndex, int speed)",
        "AddManualUVRScroller": "INFO: Entity:AddManualUVRScroller(int MaterialIndex, int UVR, int speed)",
        "AddManualUVRotator": "INFO: Entity:AddManualUVRotator(int MaterialIndex, int speed)",
        "AddPingPongScroller": "INFO: Entity:AddPingPongScroller(ping1, pingSpeed1, pong1, pongSpeed1, ping2, pingSpeed2, pong2, pongSpeed2)",
        "AddPingPongScrollerU": "INFO: Entity:AddPingPongScrollerU(int MaterialIndex, int speed)",
        "AddPingPongScrollerV": "INFO: Entity:AddPingPongScrollerV(int MaterialIndex, int speed)",
        "AddPingPongUVRScroller": "INFO: Entity:AddPingPongUVRScroller(int MaterialIndex, int UVR, float ping, float pingSpeed, float pong, float pongSpeed)",
        "AddPingPongUVRotator": "INFO: Entity:AddPingPongUVRotator(int MaterialIndex, int speed)",
        "AddThreadScroller": "INFO: Entity:AddThreadScroller(sideDist, scrollMult)",
        "AddThreadScrollerU": "INFO: Entity:AddThreadScrollerU(int MaterialIndex, int speed)",
        "AddThreadScrollerV": "INFO: Entity:AddThreadScrollerV(int MaterialIndex, int speed)",
        "AddThreadUVRScroller": "INFO: Entity:AddThreadUVRScroller(int MaterialIndex, int UVR, float sideDist, float scrollMult)",
        "AddThreadUVRotator": "INFO: Entity:AddThreadUVRotator(int MaterialIndex, int speed)",
        "AddUserThreadAnimation": "INFO: Entity:AddUserThreadAnimation(animation, [rate], [looping])",
        "AddWorldImpulse": "INFO: AddWorldImpulse(self, Ix, Iy, Iz, Px, Py, Pz)",
        "AdjustHealth": "INFO: Entity:AdjustHealth(instigator, delta)",
        "AttachBoneTo": "INFO: Entity:AttachBoneTo(selfbone, entity, bone)",
        "AttachBoneToEntityBone": "INFO: Attach a unit bone position to an entity bone position",
        "AttachOrnament": "INFO: Entity:AttachOrnament(meshBlueprintID, bone, uniformScale)",
        "AttachTo": "INFO: Entity:AttachTo(entity, bone)",
        "BeenDestroyed": "INFO: Entity:BeenDestroyed()",
        "CreateProjectile": "INFO: Entity:CreateProjectile(proj_bp, [ox, oy, oz], [dx, dy, dz]",
        "CreateProjectileAtBone": "INFO: Entity:CreateProjectileAtBone(projectile_blueprint, bone)",
        "CreatePropAtBone": "INFO: Entity:CreatePropAtBone(boneindex,prop_blueprint_id)",
        "Destroy": "INFO: Entity:Destroy()",
        "DetachAll": "INFO: Entity:DetachAll(bone,[skipBallistic])",
        "DetachFrom": "INFO: Entity:DetachFrom([skipBallistic,skipSnap])",
        "DisableIntel": "INFO: Intel:DisableIntel(type)",
        "EnableIntel": "INFO: EnableIntel(type)",
        "FallDown": "INFO: Entity:FallDown(dx,dy,dz,force) -- start falling down",
        "GetAIBrain": "INFO: GetAIBrain(self)",
        "GetArmy": "INFO: GetArmy(self)",
        "GetBlueprint": "INFO: blueprint = Entity:GetBlueprint()",
        "GetBoneCount": "INFO: Entity:GetBoneCount() -- returns number of bones in this entity's skeleton",
        "GetBoneDirection": "INFO: Entity:GetBoneDirection(bone_name)",
        "GetBoneName": "INFO: Entity:GetBoneName(i) -- return the name of the i'th bone of this entity (counting from 0)",
        "GetBonePosition": "INFO: Entity:GetBonePosition(bone_name)",
        "GetCollisionExtents": "INFO: Entity:GetCollisionExtents()",
        "GetEntityId": "INFO: Entity:GetEntityId()",
        "GetFractionComplete": "INFO: Entity:GetFractionComplete()",
        "GetHeading": "INFO: Entity:GetHeading()",
        "GetHealth": "INFO: Entity:GetHealth()",
        "GetIncidentHeadingToEntity": "INFO: Entity:GetIncidentHeadingToEntity(entity)",
        "GetIntelPersistenceDelay": "INFO: GetIntelPersistenceDelay(type)",
        "GetIntelRadius": "INFO: GetIntelRadius(type)",
        "GetMaxHealth": "INFO: Entity:GetMaxHealth()",
        "GetMeshBlueprint": "INFO: Entity:GetMeshBlueprint() -> meshBP",
        "GetOrientation": "INFO: Entity:GetOrientation()",
        "GetParent": "INFO: Entity:GetParent()",
        "GetPosition": "INFO: Entity:GetPosition([bone_name])",
        "GetPositionXYZ": "INFO: Entity:GetPositionXYZ([bone_name])",
        "GetScale": "INFO: Entity:GetScale() -> sx,sy,sz -- return current draw scale of this entity",
        "HideMesh": "INFO: HideMesh()",
        "InitIntel": "INFO: InitIntel(army,type,<radius>)",
        "IsDeadForNow": "INFO: Entity:IsDeadForever() -- returns if the unit is dead with no chance for resurrection",
        "IsDeadForever": "INFO: Entity:IsDeadForever() -- returns if the unit is dead with no chance for resurrection",
        "IsEntityState": "INFO: Entity:IsEntityState(stateName)",
        "IsIntelEnabled": "INFO: IsIntelEnabled(type)",
        "IsResurrectable": "INFO: Entity:IsResurrectable() -- returns if the unit is resurrectable or not",
        "IsValidBone": "INFO: Entity:IsValidBone(nameOrIndex,allowNil=false)",
        "Kill": "INFO: Entity:Kill(instigator,type,excessDamageRatio)",
        "PlaySound": "INFO: Entity:PlaySound(eventname,cull)",
        "PushOver": "INFO: Entity:PushOver(nx, ny, nz, depth)",
        "RemoveOrnament": "INFO: Entity:RemoveOrnament(ornamentID)",
        "RemoveScroller": "INFO: Entity:RemoveScroller()",
        "RemoveUVRScroller": "INFO: Entity:RemoveUVRScroller(int MaterialIndex)",
        "RemoveUserThreadAnimation": "INFO: Entity:RemoveUserThreadAnimation(animID)",
        "RequestRefreshUI": "INFO: Entity:RequestRefreshUI()",
        "Resurrect": "INFO: Entity:Resurrect(instigator,cause,newHealthRatio)",
        "RotateOrnament": "INFO: Entity:RotateOrnament(ornamentID, quaternion)",
        "SetAmbientSound": "INFO: Entity:SetAmbientSound(eventname, looptag)",
        "SetCollisionShape": "INFO: Entity:SetCollisionShape(['Box'|'Sphere'|'None'], centerX, centerY, centerZ, [Radius|SizeX,SizeY,SizeZ]) -- size is radius for sphere, x,y,z extent for box",
        "SetCollisionTestType": "INFO: Entity:SetCollisionTestType(string)",
        "SetDrawScale": "INFO: Entity:SetDrawScale(size): Change mesh scale on the fly",
        "SetEntityState": "INFO: Entity:SetEntityState(name, bool)",
        "SetFractionComplete": "INFO: Entity:SetFractionComplete(value)",
        "SetHealth": "INFO: Entity:SetHealth(instigator,health)",
        "SetIntelPersistenceDelay": "INFO: SetIntelPersistenceDelay(type,delay)",
        "SetIntelRadius": "INFO: SetRadius(type,radius)",
        "SetMaxHealth": "INFO: Entity:SetMaxHealth(maxhealth)",
        "SetMesh": "INFO: Entity:SetMesh(meshBp, bool keepActor): Change mesh on the fly",
        "SetMeshVisible": "INFO: Entity:SetMeshVisible(true|false)",
        "SetOrientation": "INFO: Entity:SetOrientation(orientation, immediately )",
        "SetOrientationHPR": "INFO: Entity:SetOrientationHPR(pitch,yaw,roll, immediately )",
        "SetParentOffset": "INFO: Entity:SetParentOffset(vector)",
        "SetPosition": "INFO: Entity:SetPosition(vector,[immediate])",
        "SetRegenRate": "INFO: Entity:SetRegenRate(rate)",
        "SetScale": "INFO: Entity:SetScale(s) or Entity:SetScale(sx,sy,sz)",
        "SetTextureSetByName": "INFO: Entity:SetTextureSetByname(string name)",
        "SetTextureSetIndex": "INFO: Entity:SetTextureSetIndex(int index)",
        "SetUserThreadAnimationLooping": "INFO: Entity:SetUserThreadAnimationLooping(animID, looping)",
        "SetUserThreadAnimationRate": "INFO: Entity:SetUserThreadAnimationRate(animID, rate)",
        "SetVizToAllies": "INFO: SetVizToAllies(type)",
        "SetVizToEnemies": "INFO: SetVizToEnemies(type)",
        "SetVizToFocusPlayer": "INFO: SetVizToFocusPlayer(type)",
        "SetVizToNeutrals": "INFO: SetVizToNeutrals(type)",
        "ShakeCamera": "INFO: Entity:ShakeCamera(radius, max, min, duration)Shake the camera. This is a method of entities rather than a global functionbecause it takes the position of the entity as the epicenter where it shakes more.radius - distance from epicenter at which shaking falls off to 'min'max - size of shaking in world units, when looking at epicentermin - size of shaking in world units, when at 'radius' distance or fartherduration - length of time to shake for, in seconds",
        "ShowMesh": "INFO: ShowMesh()",
        "SinkAway": "INFO: Entity:SinkAway(vy) -- sink into the ground",
        "TranslateOrnament": "INFO: Entity:TranslateOrnament(ornamentID, vector)",
        "moho.entity_methods": "INFO:"
    },
    "Sim.IAniManipulator": {
        "moho.entity_methods": "INFO:",
        "Disable": "INFO: Manipulator:Disable() -- disable a manipulator. This immediately removes it from the bone computation, which may result in the bone's position snapping.",
        "Enable": "INFO: Manipulator:Enable() -- enable a manipulator. Manipulators start out enabled so you only need this after calling Disable().",
        "SetPrecedence": "INFO: Manipulator:SetPrecedence(integer) -- change the precedence of this manipulator. Manipulators with higher precedence run first.",
        "moho.manipulator_methods": "INFO:"
    },
    "Sim.IEffect": {
        "moho.manipulator_methods": "INFO:",
        "OffsetEmitter": "INFO: Effect:OffsetEmitter(x,y,z)",
        "ResizeEmitterCurve": "INFO: Effect:ResizeEmitterCurve(parameter, time_in_ticks)Resize the emitter curve to the number of ticks passed in.This is so if we change the lifetime of the emitter we can rescale some of the curves to match if needed.Arguably this should happen automatically to all curves but the original design was screwed up.returns the effect so you can chain calls like:effect:SetEmitterParam('x',1):ScaleEmitter(3.7)",
        "ScaleEmitter": "INFO: effect:ScaleEmitter(param, scale)returns the effect so you can chain calls like:effect:SetEmitterParam('x',1):ScaleEmitter(3.7)",
        "SetBeamParam": "INFO: effect:SetBeamParam('name', value)",
        "SetEmitterCurveParam": "INFO: Effect:SetEmitterCurveParam(param_name, height, size)",
        "SetEmitterParam": "INFO: effect:SetEmitterParam('name', value)returns the effect so you can chain calls like:effect:SetEmitterParam('x',1):ScaleEmitter(3.7)",
        "moho.IEffect": "INFO:"
    },
    "Sim.MotorFallDown": {
        "moho.IEffect": "INFO:",
        "moho.MotorFallDown": "INFO:"
    },
    "Sim.Projectile": {
        "moho.MotorFallDown": "INFO:",
        "ChangeDetonateBelowHeight": "INFO: Change the detonate below height for the projectile",
        "ChangeMaxZigZag": "INFO: Change the amount of zig zag",
        "ChangeZigZagFrequency": "INFO: Change the frequency of the zig zag",
        "CreateChildProjectile": "INFO: Projectile:CreateChildProjectile(blueprint)",
        "GetCollideFriendly": "INFO: Projectile:GetCollideFriendly()",
        "GetCurrentSpeed": "INFO: Projectile:GetCurrentSpeed() -> val",
        "GetCurrentTargetPosition": "INFO: Projectile:GetCurrentTargetPosition()",
        "GetLauncher": "INFO: Get who launched this projectile",
        "GetProjectileVelocity": "INFO: Projectile:GetProjectileVelocity() -> x,y,z",
        "GetTrackingTarget": "INFO: Projectile:GetTrackingTarget()",
        "GetVelocity": "INFO: Projectile:GetVelocity() -> x,y,z",
        "SetAcceleration": "INFO: Projectile:SetAcceleration(accel)",
        "SetBallisticAcceleration": "INFO: Wrong number of arguments to Projectile:SetAccelerationVector(), expected 1, 2, or 4 but got %d",
        "SetCollideEntity": "INFO: Projectile:SetCollideEntity(onoff)",
        "SetCollideFriendly": "INFO: Projectile:SetCollideFriendly(truefalse)",
        "SetCollideSurface": "INFO: Projectile:SetCollideSurface(onoff)",
        "SetCollision": "INFO: Projectile:SetCollision(onoff)",
        "SetDamage": "INFO: Projectile:SetDamage(amount, radius) -- change how much damage this projectile will do. Either amount or radius can be nil to leave unchanged.",
        "SetDestroyOnWater": "INFO: Projectile:SetDestroyOnWater(flag)",
        "SetLifetime": "INFO: Projectile:SetLifetime(seconds)",
        "SetLocalAngularVelocity": "INFO: Projectile:SetLocalAngularVelocity(x,y,z)",
        "SetMaxSpeed": "INFO: Projectile:SetMaxSpeed(speed)",
        "SetNewTarget": "INFO: Projectile:SetNewTarget( entity )",
        "SetNewTargetGround": "INFO: Projectile:SetNewTargetGround( location )",
        "SetScaleVelocity": "INFO: Projectile:SetScaleVelocity(vs) or Projectile:SetScaleVelocity(vsx, vsy, vsz)",
        "SetStayUpright": "INFO: Projectile:SetStayUpright(truefalse)",
        "SetTurnRate": "INFO: Projectile:SetTurnRate(radians_per_second)",
        "SetVelocity": "INFO: Projectile:SetVelocity(speed) or Projectile:SetVelocity(vx,vy,vz)",
        "SetVelocityAlign": "INFO: Projectile:SetVelocityAlign(truefalse)",
        "SetVelocityRandomUpVector": "INFO: SetVelocityRandomUpVector(self)",
        "StayUnderwater": "INFO: Projectile:StayUnderwater(onoff)",
        "TrackTarget": "INFO: Projectile:TrackTarget(onoff)",
        "moho.projectile_methods": "INFO:"
    },
    "Sim.Prop": {
        "moho.projectile_methods": "INFO:",
        "GetMassValue": "INFO: Prop:GetMassValue",
        "moho.prop_methods": "INFO:"
    },
    "Sim.ReconBlip": {
        "moho.prop_methods": "INFO:",
        "GetSource": "INFO: unit = ReconBlip:GetSource()",
        "IsKnownFake": "INFO: bool = ReconBlip:IsKnownFake()",
        "IsMaybeDead": "INFO: bool = ReconBlip:IsMaybeDead()",
        "IsOnOmni": "INFO: bool = ReconBlip:IsOnOmni()",
        "IsOnRadar": "INFO: bool = ReconBlip:IsOnRadar()",
        "IsOnSonar": "INFO: bool = ReconBlip:IsOnSonar()",
        "IsSeenEver": "INFO: bool = ReconBlip:IsSeenEver()",
        "IsSeenNow": "INFO: bool = ReconBlip:IsSeenNow()",
        "moho.blip_methods": "INFO:"
    },
    "Sim.Shield": {
        "moho.blip_methods": "INFO:",
        "Deactivate": "INFO: shield:Deactivate([autoReactivateTick])",
        "DeactivatePanels": "INFO: shield:DeactivatePanels()",
        "GetAbsorbPercent": "INFO: shield:GetAbsorbPercent(float)",
        "GetReflectionPercent": "INFO: shield:GetReflectionPercent(float)",
        "OnPanelImpact": "INFO: shield:OnPanelImpact(vector)",
        "SetAbsorbPercent": "INFO: shield:SetAbsorbPercent(float)",
        "SetReflectionPercent": "INFO: shield:SetReflectionPercent(float)",
        "moho.shield_methods": "INFO:"
    },
    "Sim.Unit": {
        "moho.shield_methods": "INFO:",
        "AddBuildRestriction": "INFO: Disallow building of these categories for this unit",
        "AddCommandCap": "INFO: unit:AddCommandCap(capName) -- Add a command cap to a unit.",
        "AddCostumeSet": "INFO: AddCostumeSet(costumeSet,layer) - Add a costume set to the given unit",
        "AddImpulse": "INFO: AddImpulse(self, x, y, z, makeBallistic, gravityOverride)",
        "AddImpulseEx": "INFO: AddImpulse(self, impulseVec, makeBallistic, gravityOverride)",
        "AddSparseBone": "INFO: Unit:AddSparseBone([string boneName | int boneIndex])",
        "AddToggleCap": "INFO: unit:AddToggleCap(capName) -- Add a toggle cap to a unit.",
        "AddWorldForce": "INFO: unit:AddWorldForce(force) -- Add a gpnav world force to a unit.",
        "AlterArmor": "INFO: Unit:AlterArmor(damageTypeName, multiplier)",
        "ApplyCostume": "INFO: AddCostumeSet() - Add a costume set to the given unit",
        "AwardExperience": "INFO: unit:AwardExperience(amount)",
        "BuildManipulatorsSetEnabled": "INFO: Unit:BuildManipulatorsSetEnabled( enabled )",
        "CalculateWorldPositionFromRelative": "INFO: Calculate the desired world position from the supplied relative vector from the center of the unit",
        "CanBuild": "INFO: CanBuild(self, blueprint",
        "CanPathTo": "INFO: See if the unit can path to the goal",
        "CanPathToRect": "INFO: See if the unit can path to the goal rectangle",
        "ClearFocusEntity": "INFO: ClearFocusEntity(self)",
        "CreateNavigator": "INFO: CreateNavigator(unit)",
        "DisableAllAbilities": "INFO: unit:DisableAllAbilities()",
        "EnableManipulators": "INFO: Unit:EnableManipulators([string boneName | int boneIndex], bool Enable)",
        "GetActualBuildEnergy": "INFO: unit:GetActualBuildEnergy()",
        "GetActualBuildMass": "INFO: unit:GetActualBuildMass()",
        "GetActualBuildTime": "INFO: unit:GetActualBuildTime()",
        "GetAntiNukeSiloAmmoCount": "INFO: Unit:GetAntiNukeSiloAmmoCount()",
        "GetArmorMult": "INFO: mult = Unit:GetArmorMult(damageTypeName)",
        "GetAttacker": "INFO: GetAttacker() - get the tactical attack manager object of this unit",
        "GetBlip": "INFO: blip = GetBlip(armyIndex) - returns a blip (if any) that the given army has for the unit",
        "GetBuildArmManipulator": "INFO: Unit:GetBuildArmManipulator( index )",
        "GetBuildOrder": "INFO: GetBuildOrder(orderNum). Gets the current build order or build order # orderNum if supplied",
        "GetBuildRate": "INFO: unit:GetBuildRate() -- returns the build rate of a unit: what fraction of target unit it builds per second.",
        "GetBuildTimeMultiplier": "INFO: unit:GetBuildTimeMultiplier() -- Get the unit build cost multiplier.",
        "GetCargo": "INFO: GetCargo(self)",
        "GetCommandQueue": "INFO: Unit:GetCommandQueue()",
        "GetConsumptionPerSecondEnergy": "INFO: Get the consumption of energy of the unit",
        "GetConsumptionPerSecondMass": "INFO: Get the consumption of mass of the unit",
        "GetCurrentExperience": "INFO: unit:GetCurrentExperience()",
        "GetCurrentLayer": "INFO: GetUnitId(self)",
        "GetCurrentMoveLocation": "INFO: Unit:GetCurrentMoveLocation()",
        "GetDamageReductionMultiplier": "INFO: GetDamageReductionMultiplier()",
        "GetDetailedCommandQueue": "INFO: Unit:GetDetailedCommandQueue()",
        "GetDevText": "INFO: Unit:GetDevText()",
        "GetEscortedUnit": "INFO: Unit:GetEscortedUnit()",
        "GetEscorts": "INFO: Unit:GetEscorts()",
        "GetFireState": "INFO: Get the fire state for the unit",
        "GetFocusUnit": "INFO: GetFocusUnit(self)",
        "GetFuelRatio": "INFO: Get the fuel ratio",
        "GetFuelUseTime": "INFO: Get the fuel use time",
        "GetGuardedUnit": "INFO: Unit:GetGuardedUnit()",
        "GetGuards": "INFO: Unit:GetGuards()",
        "GetHealth": "INFO: GetHealth(self)",
        "GetJumpRange": "INFO: Unit:GetJumpRange()",
        "GetMaxHealth": "INFO: GetMaxHealth(self)",
        "GetNavigator": "INFO: GetNavigator() - get the navigator object of this unit",
        "GetNukeSiloAmmoCount": "INFO: Unit:GetNukeSiloAmmoCount()",
        "GetNumBuildOrders": "INFO: Get number of factory/engineer build orders that fit in the specified category",
        "GetNumberOfAvailableStorageSlots": "INFO: unit:GetNumberOfAvailableStorageSlots()",
        "GetNumberOfStorageSlots": "INFO: unit:GetNumberOfStorageSlots()",
        "GetProductionPerSecondEnergy": "INFO: Get the production of energy of the unit",
        "GetProductionPerSecondMass": "INFO: Get the production of mass of the unit",
        "GetProductionPerSecondResearch": "INFO: Get the production of research of the unit",
        "GetRallyPoint": "INFO: Get the rally point for the factory",
        "GetResourceConsumed": "INFO: Return the fraction of requested resources this unit consumed last tick. Normally 1, but can be fractional if economy is struggling.",
        "GetScriptBit": "INFO: Get the current toggle state of the script bit that matches the string",
        "GetShieldCurrentValue": "INFO: Get the shield current value",
        "GetShieldMAxValue": "INFO: Get the shield max value",
        "GetStat": "INFO: GetStat(Name[,defaultVal])",
        "GetTacticalSiloAmmoCount": "INFO: Unit:GetTacticalSiloAmmoCount()",
        "GetTargetEntity": "INFO: Return our target unit if we have one",
        "GetTeleportBeacon": "INFO: Unit:GetTeleportBeacon()",
        "GetTeleportRange": "INFO: Unit:GetTeleportRange()",
        "GetTransportFerryBeacon": "INFO: Unit:GetTransportFerryBeacon()",
        "GetUnitId": "INFO: GetUnitId(self)",
        "GetUnitWeaponBlueprint": "INFO: GetUnitWeaponBlueprint(self,label) -- Gets a weapon blueprint by label.",
        "GetVelocity": "INFO: GetVelocity() -> x,y,z",
        "GetWeapon": "INFO: GetWeapon(self,[index/label]) -- return the index'th weapon of this unit. Index must be between 1 and self:GetWeaponCount(), inclusive.",
        "GetWeaponCount": "INFO: GetWeaponCount(self) -- return the number of weapons on this unit. Note that dummy weapons are not included in the count, so this may differ from the number of weapons defined in the unit's blueprint.",
        "GetWorkProgress": "INFO: GetWorkProgress()",
        "GiveAntiNukeSiloAmmo": "INFO: Unit:GiveAntiNukeSiloAmmo(num)",
        "GiveNukeSiloAmmo": "INFO: Unit:GiveNukeSiloAmmo(num)",
        "GiveTacticalSiloAmmo": "INFO: Unit:GiveTacticalSiloAmmo(num)",
        "HasMeleeSpaceAroundTarget": "INFO: Unit:HasMeleeSpaceAroundTarget(target)",
        "HasValidTeleportDest": "INFO: Unit:HasValidTeleportDest()",
        "HideBone": "INFO: HideBone(self,bone,affectChildren)",
        "IsBeingBuilt": "INFO: Unit:IsBeingBuilt()",
        "IsBuildDisabled": "INFO: Unit:IsBuildDisabled()",
        "IsCapturable": "INFO: Returns if this unit can be captured or not",
        "IsIdleState": "INFO: IsIdleState(unit)",
        "IsInvulnerable": "INFO: IsInvulnerable(unit)",
        "IsMobile": "INFO: bool IsMobile() - Is this a mobile unit?",
        "IsMoving": "INFO: bool IsMoving() - Is this unit moving?",
        "IsPaused": "INFO: Unit:IsPaused()",
        "IsStunned": "INFO: IsStunned(unit)",
        "IsUnitState": "INFO: IsUnitState(unit, stateName)",
        "IsValidTarget": "INFO: bool = IsValidTarget(self)",
        "KillManipulator": "INFO: Kill a specific manipulator held by a script object",
        "KillManipulators": "INFO: Unit:KillManipulators([boneName|boneIndex])",
        "MeleeWarpAdjacentToTarget": "INFO: Unit:MeleeWarpAdjacentToTarget(target)",
        "OccupyGround": "INFO: OccupyGround(unit, flag)",
        "PopAnimPack": "INFO: PopAnimPack(stateName, override)",
        "PopAnimSet": "INFO: PopAnimSet(override)",
        "PrefetchMeshes": "INFO: PrefetchMeshes() - prefetches meshes for future use",
        "PrintCommandQueue": "INFO: Unit:PrintCommandQueue()",
        "PushAnimPack": "INFO: PushAnimPack(stateName, animPackName, override)",
        "PushAnimSet": "INFO: PushAnimSet(animSet, override)",
        "RecoilImpulse": "INFO: RecoilImpulse(self, x, y, z)",
        "RemoveAntiNukeSiloAmmo": "INFO: Unit:RemoveAntiNukeSiloAmmo(num)",
        "RemoveBuildRestriction": "INFO: Allow building of categories for this unit",
        "RemoveCommandCap": "INFO: unit:RemoveCommandCap(capName) -- Remove a command cap to a unit.",
        "RemoveCostumeSet": "INFO: AddCostumeSet(costumeSet,layer) - Remove a costume set to the given unit",
        "RemoveNukeSiloAmmo": "INFO: Unit:RemoveNukeSiloAmmo(num)",
        "RemoveTacticalSiloAmmo": "INFO: Unit:RemoveTacticalSiloAmmo(num)",
        "RemoveToggleCap": "INFO: unit:RemoveToggleCap(capName) -- Remove a toggle cap to a unit.",
        "ResetWeaponTargetPriorities": "INFO: ResetWeaponTargetPriorities(self, [index/label] ) -- Reset the targeting priorities to initial blueprint values for all weapons on this unit, or for a specific weapon, by label or index.",
        "RestoreBuildRestrictions": "INFO: Restore buildable categories to that as defined in the blueprint",
        "RestoreCommandCaps": "INFO: Restore the command caps of the unit back to blueprint spec.",
        "RestoreToggleCaps": "INFO: Restore the toggle caps of the unit back to blueprint spec.",
        "RevertCollisionShape": "INFO: Revert the collision shape to the blueprint spec",
        "RevertElevation": "INFO: Revert the elevation of the unit back to the blueperint spec",
        "RevertMaxCaptureDistance": "INFO: Restore capture max distance of the unit back to blueprint spec.",
        "RevertMaxRepairDistance": "INFO: Restore repair max distance of the unit back to blueprint spec.",
        "RevertRegenRate": "INFO: Restore regen rate of the unit back to blueprint spec.",
        "RevertRepairRate": "INFO: Restore repair rate of the unit back to blueprint spec.",
        "RevertRepairRegenRate": "INFO: Restore repair regen rate of the unit back to blueprint spec.",
        "RevertRepairScanRadius": "INFO: Restore repair scan radius of the unit back to blueprint spec.",
        "SendAnimEvent": "INFO: SendAnimEvent(event, [arg])",
        "SetAbilityEnabled": "INFO: SetAbilityEnabled()",
        "SetAccMult": "INFO: Set the acceleration multiplier of the unit",
        "SetAttackerEnableState": "INFO: SetAttackerEnableState(self,enabled) -- enable/disables the Attacker.",
        "SetAttackerEnabled": "INFO: SetAttackerEnabled(bool) - enable/disable the attacker ai and acquire target",
        "SetAutoMode": "INFO: Set auto silo build mode to on/off",
        "SetBlockCommandQueue": "INFO: SetBlockCommandQueue(unit, flag)",
        "SetBreakOffDistanceMult": "INFO: Set the break off distance multiplier of the unit",
        "SetBreakOffTriggerMult": "INFO: Set the break off trigger multiplier of the unit",
        "SetBuildCostMultiplier": "INFO: unit:SetBuildCostMultiplier(type, multiplier) -- Set the unit build cost multiplier.",
        "SetBuildDisabled": "INFO: Unit:SetBuildDisabled()",
        "SetBuildRate": "INFO: unit:SetBuildRate(frac) -- Set the build rate of a unit: what fraction of target unit it builds per second.",
        "SetBuildTimeMultiplier": "INFO: unit:SetBuildTimeMultiplier(multiplier) -- Set the unit build cost multiplier.",
        "SetBuilderAutoRepair": "INFO: Unit:SetBuilderAutoRepair( enabled )",
        "SetBusy": "INFO: SetBusy(unit, flag)",
        "SetCapturable": "INFO: Set if this unit can be captured or not.",
        "SetCaptureRate": "INFO: SetCaptureRate(newRate) -- Set the unit capture rate.",
        "SetConsumptionActive": "INFO: Unit:SetConsumptionActive(flag)",
        "SetConsumptionPerSecondEnergy": "INFO: unit:SetConsumptionPerSecondEnergy(value) -- Set the consumption of energy of a unit",
        "SetConsumptionPerSecondMass": "INFO: Set the consumption of mass of the unit",
        "SetCreator": "INFO: Set the creator for this unit",
        "SetCustomName": "INFO: Unit:SetCustomName(name)",
        "SetDamageReductionMultiplier": "INFO: SetDamageReductionMultiplier(frac) -- Set the unit damage reduction multiplier.",
        "SetDevText": "INFO: Unit:SetDevText(name)",
        "SetDoNotTarget": "INFO: SetDoNotTarget(unit, flag)",
        "SetElevation": "INFO: Set the elevation of the unit",
        "SetExperienceDisabled": "INFO: unit:SetExperienceDisabled(bool)",
        "SetExperienceGainMultiplier": "INFO: SetExperienceGainMultiplier(frac) -- Set the unit experience gain multiplier.",
        "SetFireState": "INFO: Set a specific fire state for the retaliation state of the unit",
        "SetFocusEntity": "INFO: SetFocusUnit(self, focus)",
        "SetFuelRatio": "INFO: Set the fuel ratio",
        "SetFuelUseTime": "INFO: Set the fuel use time",
        "SetIgnoreFriction": "INFO: SetIgnoreFriction(unit, flag)",
        "SetIgnoreSteering": "INFO: SetIgnoreSteering(unit, flag)",
        "SetImmobile": "INFO: SetImmobile(unit, flag)",
        "SetInvulnerable": "INFO: SetInvulnerable(unit, invulnerable)",
        "SetIsValidTarget": "INFO: SetIsValidTarget(self,bool)",
        "SetJumpRange": "INFO: Unit:SetJumpRange(float)",
        "SetLiftMult": "INFO: Set the lift multiplier of the unit",
        "SetMaxCaptureDistance": "INFO: unit:SetMaxCaptureDistance(radius) -- Set the capture max distance that the unit can be before being captured.",
        "SetMaxRepairDistance": "INFO: unit:SetMaxRepairDistance(radius) -- Set the repair max distance that the unit can be before repairing.",
        "SetMotionType": "INFO: Sets the motion type of the unit",
        "SetNavMaxSpeedMultiplier": "INFO: SetNavMaxSpeedMultiplier( value )",
        "SetNavMaxTurnSpeedMultiplier": "INFO: SetNavMaxTurnSpeedMultiplier( value )",
        "SetNumberOfStorageSlots": "INFO: unit:SetNumberOfStorageSlots(num)",
        "SetPaused": "INFO: Unit:SetPaused()",
        "SetProductionActive": "INFO: Unit:SetProductionActive(flag)",
        "SetProductionPerSecondEnergy": "INFO: Set the production of energy of the unit",
        "SetProductionPerSecondMass": "INFO: Set the production of mass of the unit",
        "SetProductionPerSecondResearch": "INFO: Set the production of research of the unit",
        "SetReclaimable": "INFO: Set if this unit can be reclaimed or not.",
        "SetRegenRate": "INFO: unit:SetRegenRate(rate) -- Set the regen rate of a unit.",
        "SetRepairRate": "INFO: unit:SetRepairRate(rate) -- Set the repair rate of a unit.",
        "SetRepairRegenRate": "INFO: unit:SetRepairRegenRate(rate) -- Set the repair regen rate of a unit.",
        "SetRepairScanRadius": "INFO: unit:SetRepairScanRadius(radius) -- Set the max scan distance to find a valid repair target.",
        "SetRepairable": "INFO: Set if this unit can be repaired or not.",
        "SetScriptBit": "INFO: Set the script bit that matches the string to the desired state",
        "SetShieldCurrentValue": "INFO: Set the shield's current value",
        "SetShieldMaxValue": "INFO: Set the shield's max value",
        "SetSpeedMult": "INFO: Set the speed multiplier of the unit",
        "SetStat": "INFO: SetStat(Name, Value)",
        "SetStrategicUnderlay": "INFO: SetStrategicUnderlay(icon)",
        "SetStunned": "INFO: SetStunned(unit, time)",
        "SetTeleportRange": "INFO: Unit:SetTeleportRange(float)",
        "SetTurnDampingMult": "INFO: Set the turn damping multiplier of the unit",
        "SetTurnMult": "INFO: Set the turn multiplier of the unit",
        "SetUnSelectable": "INFO: SetUnSelectable(unit, flag)",
        "SetUnitState": "INFO: SetUnitState(name, bool)",
        "SetWeaponTargetPriorities": "INFO: SetWeaponTargetPriorities(self, priorityTable, [index/label] ) -- Set the targeting priorities for all weapons on this unit, or for a specific weapon, by label or index.",
        "SetWorkProgress": "INFO: SetWorkProgress(float)",
        "ShowBone": "INFO: ShowBone(self,bone,affectChildren)",
        "StopSiloBuild": "INFO: StopSiloBuild(unit)",
        "TakeDamage": "INFO: TakeDamage(self, instigator, amount, damageType)",
        "TestCommandCaps": "INFO: Test if a unit has this specified set to true in the blueprint spec.",
        "TestToggleCaps": "INFO: Test if a unit has this specified set to true in the blueprint spec.",
        "ToggleFireState": "INFO: Toggle the fire state for the retaliation state of the unit",
        "ToggleScriptBit": "INFO: Toggle the script bit that matches the string",
        "TrackDamageToUnit": "INFO: TrackDamageToUnit(self, damagingUnit, amount )",
        "TransportAddUnitToStorage": "INFO: unit:TransportAddUnitToStorage(target)",
        "TransportDetachAllUnits": "INFO: DetachAllUnits(self,destroySomeUnits)",
        "TransportHasAvailableStorage": "INFO: unit:TransportHasAvailableStorage(target)",
        "TransportHasSpaceFor": "INFO: TransportHasSpaceFor(self,target)",
        "moho.unit_methods": "INFO:"
    },
    "Sim.UnitWeapon": {
        "moho.unit_methods": "INFO:",
        "CanFire": "INFO: UnitWeapon:CanFire()",
        "ChangeDamage": "INFO: UnitWeapon:ChangeDamage(value)",
        "ChangeDamageRadius": "INFO: UnitWeapon:ChangeDamageRadius(value)",
        "ChangeDamageType": "INFO: UnitWeapon:ChangeDamageType(typeName)",
        "ChangeFiringTolerance": "INFO: UnitWeapon:ChangeFiringTolerance(value)",
        "ChangeMaxHeightDiff": "INFO: UnitWeapon:ChangeMaxHeightDiff(value)",
        "ChangeProjectileBlueprint": "INFO: Change the projectile blueprint of a weapon",
        "ChangeRateOfFire": "INFO: UnitWeapon:ChangeRateOfFire(value)",
        "CreateProjectile": "INFO: UnitWeapon:CreateProjectile(muzzlebone)",
        "FireWeapon": "INFO: bool = UnitWeapon:FireWeapon()",
        "GetBlueprint": "INFO: blueprint = UnitWeapon:GetBlueprint()",
        "GetCriticalChance": "INFO: UnitWeapon:GetCriticalChance()",
        "GetCriticalDamageMultiplier": "INFO: UnitWeapon:GetCriticalDamageMultiplier()",
        "GetCurrentTarget": "INFO: UnitWeapon:GetCurrentTarget()",
        "GetCurrentTargetPos": "INFO: UnitWeapon:GetCurrentTargetPos()",
        "GetDamage": "INFO: UnitWeapon:GetDamage()",
        "GetDamageRadius": "INFO: UnitWeapon:GetDamageRadius()",
        "GetFireClockPct": "INFO: Get the firing clock percent (0 - 1)",
        "GetFiringRandomness": "INFO: Get the firing randomness",
        "GetProjectileBlueprint": "INFO: blueprint = UnitWeapon:GetProjectileBlueprint()",
        "GetStunChance": "INFO: UnitWeapon:GetStunChance()",
        "GetStunDuration": "INFO: UnitWeapon:GetStunDuration()",
        "IsEnabled": "INFO: UnitWeapon:IsEnabled()",
        "IsFireControl": "INFO: UnitWeapon:IsFireControl(label)",
        "PlaySound": "INFO: UnitWeapon:PlaySound(weapon,eventName)",
        "ResetTarget": "INFO: UnitWeapon:ResetTarget()",
        "ResetTargetingPriorities": "INFO: Reset the targeting priorities for this weapon to initial weapon blueprint values",
        "SetCenterOffset": "INFO: UnitWeapon:SetCenterOffset()",
        "SetEnabled": "INFO: UnitWeapon:SetEnabled(enabled)",
        "SetFireControl": "INFO: UnitWeapon:SetFireControl(label)",
        "SetFireTargetLayerCaps": "INFO: UnitWeapon:SetFireTargetLayerCaps(mask)",
        "SetFiringRandomness": "INFO: Set the firing randomness",
        "SetStunChance": "INFO: UnitWeapon:SetStunChance()",
        "SetStunDuration": "INFO: UnitWeapon:SetStunDuration()",
        "SetTargetEntity": "INFO: UnitWeapon:SetTarget(entity)",
        "SetTargetGround": "INFO: UnitWeapon:SetTarget(location)",
        "SetTargetingPriorities": "INFO: Set the targeting priorities for this weapon",
        "SetWeaponBone": "INFO: UnitWeapon:SetWeaponBone(boneName)",
        "TargetIsDesiredTarget": "INFO: UnitWeapon:TargetIsDesiredTarget()",
        "TransferTarget": "INFO: Transfer target from 1 weapon to another",
        "WeaponHasTarget": "INFO: bool = UnitWeapon:HasTarget()",
        "moho.weapon_methods": "INFO:"
    }
}